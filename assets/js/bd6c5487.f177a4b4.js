"use strict";(self.webpackChunkangular_workshop=self.webpackChunkangular_workshop||[]).push([[5493],{9613:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var r=n(9496);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=l(n),f=s,v=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return n?r.createElement(v,i(i({ref:t},p),{},{components:n})):r.createElement(v,i({ref:t},p))}));function v(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,i=new Array(o);i[0]=f;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a[u]="string"==typeof e?e:s,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4728:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(1163),s=(n(9496),n(9613));const o={sidebar_position:500,id:"services",tags:["service","REST"]},i="Services",a={unversionedId:"slides/foundation/testing/unit/services",id:"slides/foundation/testing/unit/services",title:"Services",description:"REST APIs",source:"@site/docs/slides/foundation/testing/unit/service.md",sourceDirName:"slides/foundation/testing/unit",slug:"/slides/foundation/testing/unit/services",permalink:"/angular-workshop/docs/slides/foundation/testing/unit/services",draft:!1,tags:[{label:"service",permalink:"/angular-workshop/docs/tags/service"},{label:"REST",permalink:"/angular-workshop/docs/tags/rest"}],version:"current",sidebarPosition:500,frontMatter:{sidebar_position:500,id:"services",tags:["service","REST"]},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/angular-workshop/docs/slides/foundation/testing/unit/components"},next:{title:"Data Binding",permalink:"/angular-workshop/docs/category/data-binding"}},c={},l=[{value:"REST APIs",id:"rest-apis",level:2},{value:"Observables",id:"observables",level:3},{value:"Promises",id:"promises",level:3}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,s.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"services"},"Services"),(0,s.kt)("h2",{id:"rest-apis"},"REST APIs"),(0,s.kt)("p",null,"This can be an example for a Jest unit Testbed:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="your.service.spec.ts"',title:'"your.service.spec.ts"'},"\nimport {MockBuilder, ngMocks} from 'ng-mocks';\nimport {ApiService} from './api.service';\nimport {HttpClientTestingModule, HttpTestingController} from '@angular/common/http/testing';\nimport {firstValueFrom} from 'rxjs';\n\ndescribe('ApiService', () => {\n    let service: ApiService;\n    let httpTestingController: HttpTestingController;\n    beforeEach(() => MockBuilder(ApiService).keep(HttpClientTestingModule));\n    beforeEach(() => {\n        service = ngMocks.get(ApiService);\n        httpTestingController = ngMocks.get(HttpTestingController);\n    });\n\n    // Add tests here\n});\n")),(0,s.kt)("h3",{id:"observables"},"Observables"),(0,s.kt)("p",null,"see ",(0,s.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/asynchronous#callbacks"},"https://jestjs.io/docs/asynchronous#callbacks")),(0,s.kt)("p",null,"This approach can help when you also want to test error cases (without successfull handling)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="your.service.spec.ts"',title:'"your.service.spec.ts"'},"\nit('should fetch users from server (observable approach)', (done) => {\n    // create request\n    service.getUsers().subscribe({\n        next: (response) => {\n            // Assert \u2014 service response\n            expect(response).toHaveLength(TEST_DATA_USERS.length);\n            done();\n        },\n        error: (err) => {\n            done('Should not throw an error', err);\n        },\n    });\n\n    // scan pending request\n    const testRequest = httpTestingController.expectOne('/api/v1/users');\n    // Assert \u2014 request\n    expect(testRequest.request.method).toBe('GET');\n\n    // fake server response\n    const fakeResponseBody = [...TEST_DATA_USERS];\n    testRequest.flush(fakeResponseBody, {status: 200, statusText: 'OK'});\n});\n")),(0,s.kt)("h3",{id:"promises"},"Promises"),(0,s.kt)("p",null,"see ",(0,s.kt)("a",{parentName:"p",href:"https://jestjs.io/docs/asynchronous#asyncawait"},"https://jestjs.io/docs/asynchronous#asyncawait")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-typescript",metastring:'title="your.service.spec.ts"',title:'"your.service.spec.ts"'},"\nit('should fetch users from server (promise approach)', async () => {\n    // create request\n    const asyncRequest = firstValueFrom(service.getUsers());\n    // scan pending request\n    const testRequest = httpTestingController.expectOne('/api/v1/users');\n    // Assert \u2014 request\n    expect(testRequest.request.method).toBe('GET');\n\n    // fake server response\n    const fakeResponseBody = [...TEST_DATA_USERS];\n    testRequest.flush(fakeResponseBody, {status: 200, statusText: 'OK'});\n\n    // consume the observable\n    const response = await asyncRequest;\n    // Assert \u2014 service response\n    expect(response).toHaveLength(TEST_DATA_USERS.length);\n});\n\n")))}d.isMDXComponent=!0}}]);